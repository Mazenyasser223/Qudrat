{"ast":null,"code":"// Global error handler for unhandled promise rejections and other errors\nexport const setupGlobalErrorHandlers=()=>{// Handle unhandled promise rejections\nwindow.addEventListener('unhandledrejection',event=>{console.error('Unhandled promise rejection:',event.reason);// Check if it's a JSON parsing error from content scripts or browser extensions\nif(event.reason&&event.reason.message&&(event.reason.message.includes('not valid JSON')||event.reason.message.includes('[object Object]')||event.reason.message.includes('Unexpected token')||event.reason.message.includes('SyntaxError'))&&event.reason.stack&&(event.reason.stack.includes('content.js')||event.reason.stack.includes('extension')||event.reason.stack.includes('chrome-extension')||event.reason.stack.includes('moz-extension'))){// This is likely from a browser extension, suppress the error\nconsole.warn('Suppressed JSON parsing error from browser extension:',event.reason.message);event.preventDefault();// Prevent the error from being logged to console\nreturn;}// For other errors, log them but don't crash the app\nconsole.error('Global error handler caught:',event.reason);});// Handle general JavaScript errors\nwindow.addEventListener('error',event=>{console.error('Global JavaScript error:',event.error);// Check if it's a JSON parsing error from content scripts or browser extensions\nif(event.error&&event.error.message&&(event.error.message.includes('not valid JSON')||event.error.message.includes('[object Object]')||event.error.message.includes('Unexpected token')||event.error.message.includes('SyntaxError'))&&event.error.stack&&(event.error.stack.includes('content.js')||event.error.stack.includes('extension')||event.error.stack.includes('chrome-extension')||event.error.stack.includes('moz-extension'))){// This is likely from a browser extension, suppress the error\nconsole.warn('Suppressed JSON parsing error from browser extension:',event.error.message);event.preventDefault();// Prevent the error from being logged to console\nreturn;}});// Handle console errors (for debugging)\nconst originalConsoleError=console.error;console.error=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}// Check if it's a JSON parsing error from content scripts or browser extensions\nconst errorMessage=args.join(' ');if((errorMessage.includes('not valid JSON')||errorMessage.includes('[object Object]')||errorMessage.includes('Unexpected token')||errorMessage.includes('SyntaxError'))&&(errorMessage.includes('content.js')||errorMessage.includes('extension')||errorMessage.includes('chrome-extension')||errorMessage.includes('moz-extension'))){// Suppress these errors as they're from browser extensions\nconsole.warn('Suppressed JSON parsing error from browser extension');return;}// Log other errors normally\noriginalConsoleError.apply(console,args);};};// Initialize error handlers\nsetupGlobalErrorHandlers();","map":{"version":3,"names":["setupGlobalErrorHandlers","window","addEventListener","event","console","error","reason","message","includes","stack","warn","preventDefault","originalConsoleError","_len","arguments","length","args","Array","_key","errorMessage","join","apply"],"sources":["M:/Qudrat/client/src/utils/errorHandler.js"],"sourcesContent":["// Global error handler for unhandled promise rejections and other errors\r\n\r\nexport const setupGlobalErrorHandlers = () => {\r\n  // Handle unhandled promise rejections\r\n  window.addEventListener('unhandledrejection', (event) => {\r\n    console.error('Unhandled promise rejection:', event.reason);\r\n    \r\n    // Check if it's a JSON parsing error from content scripts or browser extensions\r\n    if (event.reason && event.reason.message && \r\n        (event.reason.message.includes('not valid JSON') ||\r\n         event.reason.message.includes('[object Object]') ||\r\n         event.reason.message.includes('Unexpected token') ||\r\n         event.reason.message.includes('SyntaxError')) &&\r\n        (event.reason.stack && (event.reason.stack.includes('content.js') || \r\n                                event.reason.stack.includes('extension') ||\r\n                                event.reason.stack.includes('chrome-extension') ||\r\n                                event.reason.stack.includes('moz-extension')))) {\r\n      // This is likely from a browser extension, suppress the error\r\n      console.warn('Suppressed JSON parsing error from browser extension:', event.reason.message);\r\n      event.preventDefault(); // Prevent the error from being logged to console\r\n      return;\r\n    }\r\n    \r\n    // For other errors, log them but don't crash the app\r\n    console.error('Global error handler caught:', event.reason);\r\n  });\r\n\r\n  // Handle general JavaScript errors\r\n  window.addEventListener('error', (event) => {\r\n    console.error('Global JavaScript error:', event.error);\r\n    \r\n    // Check if it's a JSON parsing error from content scripts or browser extensions\r\n    if (event.error && event.error.message && \r\n        (event.error.message.includes('not valid JSON') ||\r\n         event.error.message.includes('[object Object]') ||\r\n         event.error.message.includes('Unexpected token') ||\r\n         event.error.message.includes('SyntaxError')) &&\r\n        (event.error.stack && (event.error.stack.includes('content.js') || \r\n                                event.error.stack.includes('extension') ||\r\n                                event.error.stack.includes('chrome-extension') ||\r\n                                event.error.stack.includes('moz-extension')))) {\r\n      // This is likely from a browser extension, suppress the error\r\n      console.warn('Suppressed JSON parsing error from browser extension:', event.error.message);\r\n      event.preventDefault(); // Prevent the error from being logged to console\r\n      return;\r\n    }\r\n  });\r\n\r\n  // Handle console errors (for debugging)\r\n  const originalConsoleError = console.error;\r\n  console.error = (...args) => {\r\n    // Check if it's a JSON parsing error from content scripts or browser extensions\r\n    const errorMessage = args.join(' ');\r\n    if ((errorMessage.includes('not valid JSON') || \r\n         errorMessage.includes('[object Object]') ||\r\n         errorMessage.includes('Unexpected token') ||\r\n         errorMessage.includes('SyntaxError')) && \r\n        (errorMessage.includes('content.js') || \r\n         errorMessage.includes('extension') ||\r\n         errorMessage.includes('chrome-extension') ||\r\n         errorMessage.includes('moz-extension'))) {\r\n      // Suppress these errors as they're from browser extensions\r\n      console.warn('Suppressed JSON parsing error from browser extension');\r\n      return;\r\n    }\r\n    \r\n    // Log other errors normally\r\n    originalConsoleError.apply(console, args);\r\n  };\r\n};\r\n\r\n// Initialize error handlers\r\nsetupGlobalErrorHandlers();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}