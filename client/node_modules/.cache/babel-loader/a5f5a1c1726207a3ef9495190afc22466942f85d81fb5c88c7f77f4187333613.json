{"ast":null,"code":"// Global error handler for unhandled promise rejections and other errors\n\nexport const setupGlobalErrorHandlers = () => {\n  // Handle unhandled promise rejections\n  window.addEventListener('unhandledrejection', event => {\n    console.error('Unhandled promise rejection:', event.reason);\n\n    // Check if it's a JSON parsing error from content scripts or browser extensions\n    if (event.reason && event.reason.message && (event.reason.message.includes('not valid JSON') || event.reason.message.includes('[object Object]') || event.reason.message.includes('Unexpected token')) && event.reason.stack && (event.reason.stack.includes('content.js') || event.reason.stack.includes('extension') || event.reason.stack.includes('chrome-extension'))) {\n      // This is likely from a browser extension, suppress the error\n      console.warn('Suppressed JSON parsing error from browser extension:', event.reason.message);\n      event.preventDefault(); // Prevent the error from being logged to console\n      return;\n    }\n\n    // For other errors, log them but don't crash the app\n    console.error('Global error handler caught:', event.reason);\n  });\n\n  // Handle general JavaScript errors\n  window.addEventListener('error', event => {\n    console.error('Global JavaScript error:', event.error);\n\n    // Check if it's a JSON parsing error from content scripts or browser extensions\n    if (event.error && event.error.message && (event.error.message.includes('not valid JSON') || event.error.message.includes('[object Object]') || event.error.message.includes('Unexpected token')) && event.error.stack && (event.error.stack.includes('content.js') || event.error.stack.includes('extension') || event.error.stack.includes('chrome-extension'))) {\n      // This is likely from a browser extension, suppress the error\n      console.warn('Suppressed JSON parsing error from browser extension:', event.error.message);\n      event.preventDefault(); // Prevent the error from being logged to console\n      return;\n    }\n  });\n\n  // Handle console errors (for debugging)\n  const originalConsoleError = console.error;\n  console.error = (...args) => {\n    // Check if it's a JSON parsing error from content scripts or browser extensions\n    const errorMessage = args.join(' ');\n    if ((errorMessage.includes('not valid JSON') || errorMessage.includes('[object Object]') || errorMessage.includes('Unexpected token')) && (errorMessage.includes('content.js') || errorMessage.includes('extension') || errorMessage.includes('chrome-extension'))) {\n      // Suppress these errors as they're from browser extensions\n      console.warn('Suppressed JSON parsing error from browser extension');\n      return;\n    }\n\n    // Log other errors normally\n    originalConsoleError.apply(console, args);\n  };\n};\n\n// Initialize error handlers\nsetupGlobalErrorHandlers();","map":{"version":3,"names":["setupGlobalErrorHandlers","window","addEventListener","event","console","error","reason","message","includes","stack","warn","preventDefault","originalConsoleError","args","errorMessage","join","apply"],"sources":["M:/Qudrat/client/src/utils/errorHandler.js"],"sourcesContent":["// Global error handler for unhandled promise rejections and other errors\r\n\r\nexport const setupGlobalErrorHandlers = () => {\r\n  // Handle unhandled promise rejections\r\n  window.addEventListener('unhandledrejection', (event) => {\r\n    console.error('Unhandled promise rejection:', event.reason);\r\n    \r\n    // Check if it's a JSON parsing error from content scripts or browser extensions\r\n    if (event.reason && event.reason.message && \r\n        (event.reason.message.includes('not valid JSON') ||\r\n         event.reason.message.includes('[object Object]') ||\r\n         event.reason.message.includes('Unexpected token')) &&\r\n        (event.reason.stack && (event.reason.stack.includes('content.js') || \r\n                                event.reason.stack.includes('extension') ||\r\n                                event.reason.stack.includes('chrome-extension')))) {\r\n      // This is likely from a browser extension, suppress the error\r\n      console.warn('Suppressed JSON parsing error from browser extension:', event.reason.message);\r\n      event.preventDefault(); // Prevent the error from being logged to console\r\n      return;\r\n    }\r\n    \r\n    // For other errors, log them but don't crash the app\r\n    console.error('Global error handler caught:', event.reason);\r\n  });\r\n\r\n  // Handle general JavaScript errors\r\n  window.addEventListener('error', (event) => {\r\n    console.error('Global JavaScript error:', event.error);\r\n    \r\n    // Check if it's a JSON parsing error from content scripts or browser extensions\r\n    if (event.error && event.error.message && \r\n        (event.error.message.includes('not valid JSON') ||\r\n         event.error.message.includes('[object Object]') ||\r\n         event.error.message.includes('Unexpected token')) &&\r\n        (event.error.stack && (event.error.stack.includes('content.js') || \r\n                                event.error.stack.includes('extension') ||\r\n                                event.error.stack.includes('chrome-extension')))) {\r\n      // This is likely from a browser extension, suppress the error\r\n      console.warn('Suppressed JSON parsing error from browser extension:', event.error.message);\r\n      event.preventDefault(); // Prevent the error from being logged to console\r\n      return;\r\n    }\r\n  });\r\n\r\n  // Handle console errors (for debugging)\r\n  const originalConsoleError = console.error;\r\n  console.error = (...args) => {\r\n    // Check if it's a JSON parsing error from content scripts or browser extensions\r\n    const errorMessage = args.join(' ');\r\n    if ((errorMessage.includes('not valid JSON') || \r\n         errorMessage.includes('[object Object]') ||\r\n         errorMessage.includes('Unexpected token')) && \r\n        (errorMessage.includes('content.js') || \r\n         errorMessage.includes('extension') ||\r\n         errorMessage.includes('chrome-extension'))) {\r\n      // Suppress these errors as they're from browser extensions\r\n      console.warn('Suppressed JSON parsing error from browser extension');\r\n      return;\r\n    }\r\n    \r\n    // Log other errors normally\r\n    originalConsoleError.apply(console, args);\r\n  };\r\n};\r\n\r\n// Initialize error handlers\r\nsetupGlobalErrorHandlers();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}